name: CI/CD Pipeline.

on:
  push:
    branches:
      - main

jobs:
  Continuous-Integrate:
    runs-on: ubuntu-latest 
    steps:

      - uses: actions/checkout@v2

      - name: Install Docker Compose
        run: |
          curl -L "https://github.com/docker/compose/releases/download/$(curl -s https://api.github.com/repos/docker/compose/releases/latest | grep tag_name | cut -d '"' -f 4)/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          chmod +x /usr/local/bin/docker-compose

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Build and Run with Docker Compose
        run: docker-compose -f docker-compose.yml up --build --abort-on-container-exit

      - name: Lint Production Code
        run: docker-compose run --rm api-prod flake8

      - name: Lint Test Code
        run: docker-compose run --rm api-test flake8

      - name: Clean up
        run: docker-compose down

  push-image-ecr:
    name: Build and Push Specific Dockerfile to ECR
    runs-on: ubuntu-latest
    needs: Continuous-Integrate

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
        aws-region: ${{ secrets.AWS_REGION }}
    
    - name: Log in to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1
    
    - name: Build Docker image
      env:
        ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker build \
          --build-arg AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }} \
          --build-arg AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }} \
          --build-arg AWS_SESSION_TOKEN=${{ secrets.AWS_SESSION_TOKEN }} \
          -t $ECR_REPOSITORY:$IMAGE_TAG -f api/Dockerfile .
        docker tag $ECR_REPOSITORY:$IMAGE_TAG $ECR_REPOSITORY:latest

    - name: Push Docker image to ECR
      env:
        ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker push $ECR_REPOSITORY:$IMAGE_TAG
        docker push $ECR_REPOSITORY:latest

  Continuous-Deployment:
    needs: push-image-ecr
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Validate CloudFormation template
        run: |
          aws cloudformation validate-template --template-body file://container-formation.yml

      - name: Deploy CloudFormation stack
        env:
          ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
          VPC_ID: ${{ secrets.VPC_ID }}
        run: |
          aws cloudformation deploy \
            --template-file aws-formation.yml \
            --stack-name api-formation-stack \
            --parameter-overrides \
                ECRRepositoryURI=$ECR_REPOSITORY \
                VPC=$VPC_ID