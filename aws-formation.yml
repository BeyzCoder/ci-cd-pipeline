AWSTemplateFormatVersion: '2010-09-09'
Description: Setup for ECR, ECS, and Fargate to deploy a FastAPI app

Parameters:
  VPCId:
    Type: AWS::EC2::VPC::Id
    Description: The VPC in which ECS will be deployed.
    
  SubnetIds:
    Type: List<AWS::EC2::Subnet::Id>
    Description: The subnets to deploy ECS tasks into.
    
  ClusterName:
    Type: String
    Default: fastapi-cluster
    Description: The name of the ECS cluster.
  
  ECRRepositoryName:
    Type: String
    Default: fastapi-ecr-repo
    Description: The name of the ECR repository.

Resources:
  
  # Create an ECR repository
  FastAPIRepository:
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: !Ref ECRRepositoryName
      LifecyclePolicy:
        LifecyclePolicyText: '{"rules":[{"ruleAction":"expire","description":"Expire old images","rulePriority":1,"selection":{"tagStatus":"any","countType":"imageCount","countUnit":"moreThan","countNumber":10}}]}'

  # Create an ECS Cluster
  FastAPICluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Ref ClusterName
  
  # Create the ECS Task Role
  FastAPITaskRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action: 'sts:AssumeRole'
            Principal:
              Service: 'ecs-tasks.amazonaws.com'
  
  # Create the ECS Execution Role for Fargate
  FastAPIExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action: 'sts:AssumeRole'
            Principal:
              Service: 'ecs-tasks.amazonaws.com'
      Policies:
        - PolicyName: ECSExecutionPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'ecr:GetAuthorizationToken'
                  - 'ecr:BatchCheckLayerAvailability'
                  - 'ecr:GetAuthorizationToken'
                  - 'logs:*'
                Resource: '*'

  # Define ECS Fargate Task Definition
  FastAPITaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: fastapi-task
      Cpu: 256
      Memory: 512
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      ExecutionRoleArn: !GetAtt FastAPIExecutionRole.Arn
      TaskRoleArn: !GetAtt FastAPITaskRole.Arn
      ContainerDefinitions:
        - Name: fastapi-container
          Image: !Sub "${FastAPIRepository.RepositoryUri}:latest"
          Memory: 512
          PortMappings:
            - ContainerPort: 80
              HostPort: 80

  # ECS Service to run Fargate Tasks
  FastAPIService:
    Type: AWS::ECS::Service
    Properties:
      Cluster: !Ref FastAPICluster
      DesiredCount: 1
      LaunchType: FARGATE
      TaskDefinition: !Ref FastAPITaskDefinition
      NetworkConfiguration:
        AwsvpcConfiguration:
          Subnets: !Ref SubnetIds
          SecurityGroups: 
            - Ref: ECSSecurityGroup
          AssignPublicIp: ENABLED

  # Create a Security Group for the ECS Service
  ECSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable HTTP access
      VpcId: !Ref VPCId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          CidrIp: '0.0.0.0/0'

Outputs:
  ClusterName:
    Description: The name of the ECS cluster
    Value: !Ref FastAPICluster
  
  ECRRepositoryUri:
    Description: URI of the ECR Repository
    Value: !Sub "${FastAPIRepository.RepositoryUri}"
  
  ECSServiceName:
    Description: The name of the ECS Service
    Value: !Ref FastAPIService
